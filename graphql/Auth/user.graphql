type User {
    id: ID!
    name: String!
    email: String!
    role: String!
    role_r: Role! @belongsTo
    password: String!
    email_verified_at: DateTime
    created_at: DateTime
    updated_at: DateTime
}

type Token{
    message: String
    access_token: String
    refresh_token: String
}

input UserInput {
    name: String! @rules(apply: ["unique:users,name"])
    email: String! @rules(apply: ["unique:users,email", "email"])
    password: String! @rules(apply: ["min:8", "max:32", "regex:/^.*(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!$-_@%]).*$/"]) 
                 #attribute: "password must contain at least one uppercase one lowercase one number and one special character(!$-_@%)")
}

extend type Mutation {
    sign_up(input: UserInput! @spread): Message!
        @field(resolver: "App\\GraphQL\\Mutations\\Auth\\Sign_up")
    
    sign_in(email: String!, password: String!): Token
        @field(resolver: "App\\GraphQL\\Mutations\\Auth\\Sign_in")
}

extend type Query {
    users: [User!]! @all
    # users_by_email(email: String! @whereKey): User @all
}