type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    email_verified_at: DateTime
    roles: [Role!]! @belongsToMany

}

type Tokens{
    message: String
    access_token: String
    refresh_token: String
}

input SignUpInput {
    name: String! @rules(apply: ["required","unique:users,name","min:4", "max:22"])
    email: String! @rules(apply: ["required","unique:users,email", "email"])
    password: String! @rules(apply: ["required","min:8", "max:32", "regex:/^.*(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!$-_@%]).*$/"]) 
                 #attribute: "password must contain at least one uppercase one lowercase one number and one special character(!$-_@%)")
}

input SignInInput {
    email: String! @rules(apply: ["required", "email"])
    password: String! @rules(apply: ["required","min:8", "max:32", "regex:/^.*(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!$-_@%]).*$/"]) 
                 #attribute: "password must contain at least one uppercase one lowercase one number and one special character(!$-_@%)")
}

extend type Mutation {
    sign_up(input: SignUpInput! @spread): Message!
        @field(resolver: "App\\GraphQL\\Mutations\\Auth\\Sign_up")
    
    sign_in(input: SignInInput! @spread): Tokens
        @field(resolver: "App\\GraphQL\\Mutations\\Auth\\Sign_in")
}

extend type Query @guard{
    users: [User!]! @all
    users_by_email(email: String! @rules(apply: ["required"])
        @eq): User @all
}