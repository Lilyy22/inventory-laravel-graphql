type Role {
    id: UUID!
    name: String!
    slug: String!
    created_at: DateTime
    updated_at: DateTime
    users: [User!]! @belongsToMany
    permissions: [Permission!]! @belongsToMany
}

input CreateRoleInput {
    name: String! @rules(apply: ["required","unique:roles,name"])
    slug: String! @rules(apply: ["required","unique:roles,slug"])
}

input UpdateRoleInput {
    name: String
    slug: String
}

extend type Mutation @guard{
    insert_role_one(input: CreateRoleInput! @spread): Role
            @can(ability: "create", model: "App\\Models\\Auth\\Role", policy: "App\\Policies\\RolePolicy")
            @create(model: "App\\Models\\Auth\\Role")

    update_role_one(id: UUID! @rules(apply: ["required"]), input: UpdateRoleInput! @spread): Role 
            @can(ability: "create", model: "App\\Models\\Auth\\Role", policy: "App\\Policies\\RolePolicy")
            @update(model: "App\\Models\\Auth\\Role")

    delete_role(role_id: UUID!): Message! 
            @can(ability: "delete", model: "App\\Models\\Auth\\Role", policy: "App\\Policies\\RolePolicy")
            @field(resolver: "App\\GraphQL\\Mutations\\Auth\\Autho\\Delete_role")

    assign_permissions_to_role(role_id: UUID!, permissions: [UUID!]!): Message!
            @can(ability: "assign_permission", model: "App\\Models\\Auth\\Role", policy: "App\\Policies\\RolePolicy")
            @field(resolver: "App\\GraphQL\\Mutations\\Auth\\Autho\\Assign_permissions_to_role")

    remove_permissions_from_role(role_id: UUID!, permissions: [UUID!]!): Message!
            @can(ability: "remove_permission", model: "App\\Models\\Auth\\Role", policy: "App\\Policies\\RolePolicy")
            @field(resolver: "App\\GraphQL\\Mutations\\Auth\\Autho\\Remove_permissions_from_role")
}

extend type Query @guard{
    roles: [Role!]! @all(model: "App\\Models\\Auth\\Role")
}